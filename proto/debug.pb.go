// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Item struct {
	Item                 string   `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_debug_7cffbd40d303c4ed, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Item.Unmarshal(m, b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Item.Marshal(b, m, deterministic)
}
func (dst *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(dst, src)
}
func (m *Item) XXX_Size() int {
	return xxx_messageInfo_Item.Size(m)
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetItem() string {
	if m != nil {
		return m.Item
	}
	return ""
}

func init() {
	proto.RegisterType((*Item)(nil), "proto.Item")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Debug service

type DebugClient interface {
	Echo(ctx context.Context, in *Item, opts ...grpc.CallOption) (Debug_EchoClient, error)
	Silence(ctx context.Context, in *Item, opts ...grpc.CallOption) (Debug_SilenceClient, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) Echo(ctx context.Context, in *Item, opts ...grpc.CallOption) (Debug_EchoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Debug_serviceDesc.Streams[0], c.cc, "/proto.Debug/Echo", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_EchoClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type debugEchoClient struct {
	grpc.ClientStream
}

func (x *debugEchoClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *debugClient) Silence(ctx context.Context, in *Item, opts ...grpc.CallOption) (Debug_SilenceClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Debug_serviceDesc.Streams[1], c.cc, "/proto.Debug/Silence", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugSilenceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Debug_SilenceClient interface {
	Recv() (*Item, error)
	grpc.ClientStream
}

type debugSilenceClient struct {
	grpc.ClientStream
}

func (x *debugSilenceClient) Recv() (*Item, error) {
	m := new(Item)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Debug service

type DebugServer interface {
	Echo(*Item, Debug_EchoServer) error
	Silence(*Item, Debug_SilenceServer) error
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_Echo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Item)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Echo(m, &debugEchoServer{stream})
}

type Debug_EchoServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type debugEchoServer struct {
	grpc.ServerStream
}

func (x *debugEchoServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

func _Debug_Silence_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Item)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DebugServer).Silence(m, &debugSilenceServer{stream})
}

type Debug_SilenceServer interface {
	Send(*Item) error
	grpc.ServerStream
}

type debugSilenceServer struct {
	grpc.ServerStream
}

func (x *debugSilenceServer) Send(m *Item) error {
	return x.ServerStream.SendMsg(m)
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Echo",
			Handler:       _Debug_Echo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Silence",
			Handler:       _Debug_Silence_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "debug.proto",
}

func init() { proto.RegisterFile("debug.proto", fileDescriptor_debug_7cffbd40d303c4ed) }

var fileDescriptor_debug_7cffbd40d303c4ed = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x49, 0x4d, 0x2a,
	0x4d, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0x52, 0x5c, 0x2c, 0x9e,
	0x25, 0xa9, 0xb9, 0x42, 0x42, 0x5c, 0x2c, 0x99, 0x25, 0xa9, 0xb9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a,
	0x9c, 0x41, 0x60, 0xb6, 0x51, 0x18, 0x17, 0xab, 0x0b, 0x48, 0x87, 0x90, 0x0a, 0x17, 0x8b, 0x6b,
	0x72, 0x46, 0xbe, 0x10, 0x37, 0x44, 0xaf, 0x1e, 0x48, 0x87, 0x14, 0x32, 0x47, 0x89, 0xc1, 0x80,
	0x51, 0x48, 0x9d, 0x8b, 0x3d, 0x38, 0x33, 0x27, 0x35, 0x2f, 0x39, 0x15, 0xbf, 0xc2, 0x24, 0x36,
	0x30, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xbf, 0x22, 0x47, 0xcd, 0x90, 0x00, 0x00, 0x00,
}
